1.1 编写一个简单的C++程序
	C++程序包含一个或多个函数（Function），操作系统每次调用main来运行C++程序。
	int main()
	{
		return 0;
	}
	这是一个简单的C++程序，包含返回类型（return type）、函数名（function name）、括号里为形参列表（parameter list）以及函数体（function body）。
	int类型为一种内置类型（built-in type），函数体是以左花括号开始，右括号结束的语句块（block of statements）。注意，C++语句结束后记得加上;号。
1.1.1 编译、运行程序
	源程序命名：.cc、.cxx、.cpp、.cp及.C
	命令行运行编译器：cc prog1.cc(linux)
1.2 初识输入输出
	在iostream库中包含两个基础类型istream和ostream类型对象，分别为输入流和输出流。
	标准输入（standard input）对象：cin，为istream类型对象。
	标准输出（standard output）对象：cout，为ostream类型对象。cerr用于输出警告和错误消息，为标准错误（standard error）。clog输出程序运行时的一般性信息。
	一个使用IO的程序
	#include <iostream>
	int main()
	{
		std::cout << "Enter two number:"<< std::endl;
		int v1 = 0, v2 = 0;
		std::cin >> v1 >> v2;
		std::cout << "The sum of " << v1 << " and "  << v2
			  << " is " << v1 + v2 << std::endl;
		return 0;
	}	
	输入运算符（<<）：接受两个运算对象，左侧的运算对象必须是ostream对象，右侧的运算对象就是要打印的值。该运算符将给定的值写到给定的ostream对象中，输出运算符计算结果为左侧运算对象。
	std::cout << "Enter two numbers:";
	std::cout << std::endl;
	第一个输出运算符，打印的消息为一个字符串字面值常量（string literal）。
	第二个运算符打印endl;，这是一个操纵符（manipulate）的特殊值，写入endl为结束当前行，并将与设备关联的缓冲区（buffer）中的内容刷到设备中。
	在标准库中，前缀std::指出名字cout和endl是定义在std的命名空间，::为作用域运算符。
	输入运算符（>>），接受istream作为其左值运算对象，与输出运算符类型。
	std::cin >> v1;
	std::cin >> v2;
	std::cin读入两个值，将第一个值存入v1，将第二个值存入v2。
1.3 注释简介
	// 双斜线
	/* */ 两个界定符
	注释界定符不能嵌套
1.4 控制流
1.4.1 while语句
	while (condition)
		statement
	condition值的是条件，为一个产生真或假的结果的表达式。
	while (val <= 10){
		sum += val;
		++val;
	}
	小于等于运算符（<=），复合赋值运算符（+=），本质为与一个加法结合一个赋值（assignment）是相同的。前缀递增运算符（++），递增运算符将运算对象的值增加 1。
1.4.2 for语句
	for(初始化语句（init-statement）;循环条件（condition）;表达式（expression）)
	for循环和while循环之间的优缺点：
	The main difference between the `for`'s and the `while`'s is a matter of pragmatics: 
	we usually use `for` when there is a known number of iterations, 
	and use `while` constructs when the number of iterations in not known in advance. 
	The `while` vs `do ... while` issue is also of pragmatics, 
	the second executes the instructions once at start, 
	and afterwards it behaves just like the simple `while`.
1.4.3 读取数量不定的输入数据
	#include <iostream>
	int main(){
		int sum = 0, value = 0;
		while(std::cin >> value)
			sum += value;
		std::cout << "Sum is: " << sum <<std::endl;
		return 0; 
	}
	使用istream对象作为条件时，其效果是检测流的状态。若流是有效的，即流未遇到错误，那么检测成功。若遇到文件结束符（end-of-file），或遇到一个无效的输入时，istream对象状态会变为无效状态。处于无效状态的istream对象为假。	

